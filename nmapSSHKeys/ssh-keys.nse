--local nmap = require "nmap"
local shortport = require "shortport"
local ssh1 = require "ssh1"
local ssh2 = require "ssh2"
local stdnse = require "stdnse"
--local string = require "string"
local table = require "table"
local comm = require "comm"

author = "Virgilio"
license = "Same as Nmap :)"
categories = {"safe","default","discovery","ssh"}

portrule = shortport.port_or_service(22,"ssh")

action = function(host, port)
	if port.version.name_confidence < 8 or port.version.name ~= "ssh" then --to be completely shure tha it's ssh
		local status, banner = comm.opencon(host, port, nil, {recv_before=true})
		if not string.find(banner, "SSH") then
			return nil
		end
	end

	local out, keys, key = {}, {}
	table.insert(keys, (ssh1.fetch_host_key(host, port)))
	table.insert(keys, (ssh2.fetch_host_key(host, port, "ssh-dss")))
	table.insert(keys, (ssh2.fetch_host_key(host, port, "ssh-rsa")))
	table.insert(keys, (ssh2.fetch_host_key(host, port, "ecdsa-sha2-nistp256")))
	table.insert(keys, (ssh2.fetch_host_key(host, port, "ecdsa-sha2-nistp384")))
	table.insert(keys, (ssh2.fetch_host_key(host, port, "ecdsa-sha2-nistp521")))
	table.insert(keys, (ssh2.fetch_host_key(host, port, "ssh-ed25519")))
	for _, key in ipairs( keys ) do
		if key then table.insert(out, string.format("%s  : %s\n\n", key.key_type,key.key)) end
	end
	return stdnse.format_output(true, out)
	
end
